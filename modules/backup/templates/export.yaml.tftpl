# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

main:
  steps:
  - collectInfos:
      assign:
        - databases: ${databases}
        - database_type: ${dbType}
        - backupTime: $${string(int(sys.now()))}
        - snoozeAlertName: '$${"SQL Export " + time.format(sys.now(), "Europe/Paris")}'
%{ if databases == "[]" && (dbType == "POSTGRES" || dbType == "SQLSERVER") }
  - list of databases:
      call: googleapis.sqladmin.v1.databases.list
      args:
        project: ${project}
        instance: ${instanceName}
      result: dbListResult
  - collect DB list:
      for:
        value: db
        in: $${dbListResult.items}
        steps:
          - iterate:
              assign:
                - databases: $${list.concat(databases, db.name)}

%{ endif }

%{ if length(alerts_policies_to_snooze) > 0 }
  - start snooze on alerts:
          call: http.post
          args:
              body:
                criteria:
                  policies: ${alerts_policies_to_snooze}
                interval:
                  startTime: $${time.format(sys.now())}
                  endTime: $${time.format(sys.now() + 3600)} # assume 1 hour of mute, will be ended automatically at the end
                displayName: $${snoozeAlertName}
              url: https://monitoring.googleapis.com/v3/projects/${project}/snoozes
              auth:
                type: OAuth2
                scopes: [
                  "https://www.googleapis.com/auth/monitoring"
                ]
          result: snoozeAlert
%{ endif }

%{ if dbType == "POSTGRES" }
  - export databases:
      for:
        value: database
        in: $${databases}
        steps:
          - export database:
              call: googleapis.sqladmin.v1.instances.export
              args:
                project: ${project}
                instance: ${instanceName}
                body:
                  exportContext:
                    databases: [$${database}]
                    uri: $${"${gcsBucket}/${instanceName}-" + database + "-" + backupTime + %{ if compressExport == true }".sql.gz"%{ else }".sql"%{ endif }}
%{ endif }

%{ if dbType == "SQLSERVER" }
  - export databases:
      for:
        value: database
        in: $${databases}
        steps:
          - exclude System DB:
              switch:
                - condition: $${database != "tempdb" } #tempdb has to be excluded in an export
                  steps:
                    - export database:
                        call: googleapis.sqladmin.v1.instances.export
                        args:
                          project: ${project}
                          instance: ${instanceName}
                          body:
                            exportContext:
                              databases: [$${database}]
                              uri: $${"${gcsBucket}/${instanceName}-" + database + "-" + backupTime + ".bak"}
                              fileType: BAK
%{ endif }

%{ if dbType == "MYSQL" }
  - create new export:
      call: googleapis.sqladmin.v1.instances.export
      args:
        project: ${project}
        instance: ${instanceName}
        body:
          exportContext:
            databases: $${databases}
            uri: $${"${gcsBucket}/${instanceName}-" + backupTime + %{ if compressExport == true }".sql.gz"%{ else }".sql"%{ endif }}
%{ endif }

%{ if length(alerts_policies_to_snooze) > 0 }
  - end snooze on alerts:
          call: http.patch
          args:
              body:
                criteria:
                  policies: ${alerts_policies_to_snooze}
                interval:
                  startTime: $${snoozeAlert.body.interval.startTime}
                  endTime: $${time.format(sys.now() + 300)} # Add 5 min to give some time to the cpu usage to reduce
                displayName: $${snoozeAlertName}
              url: '$${"https://monitoring.googleapis.com/v3/projects/${project}/snoozes/" + text.replace_all(snoozeAlert.body.name, "projects/${project}/snoozes/", "") + "?updateMask=interval.endTime"}'
              auth:
                type: OAuth2
                scopes: [
                  "https://www.googleapis.com/auth/monitoring"
                ]
          result: snoozeAlertEnded
%{ endif }
